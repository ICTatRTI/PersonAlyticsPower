% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/polyICT.r
\docType{class}
\name{polyICT}
\alias{polyICT}
\title{\code{polyICT} class generator}
\usage{
polyICT$new()
}
\description{
\code{polyICT} class generator

\code{polyICT} class generator
}
\details{
The \code{polyICT} class generator specifies the inputs needed to simulate
data from a polynomial growth model. Once a \code{polyICT} object is created,
you can called its methods and examine or update its fields.

Methods are functions that come packaged within your \code{polyICT} object
and include \code{$print()} for printing the inputs,
\code{$update()} for changing the inputs,
\code{$designCheck()} for visualizing the design, and
\code{$makeData} for simulating a single data set. See the section
titled \strong{Methods}.

Fields are all the data stored within a \code{polyICT} object,
some of which are provided by the user when initializing a \code{polyICT}
object, and others which are derived from these inputs and cannot be changed
by the user directly. These are detailed in the section titled \strong{Fields}.
Fields can be accessed using the \code{$} operator. For example, if your
\code{polyICT} object is called \code{myPolyICT}, use \code{myPolyICT$inputMat}.
}
\section{Methods}{

\describe{

  \item{\code{new}}{Used to initialize a \code{polyICT} object as illustrated
  in the \strong{Examples} below. The following
  parameters can be passed to \code{$new()}:

  \code{groups} Named numeric vector. The default is
  \code{c(group1=10, group2=10)}. The values are the number of participants
  per group and the names are the group names.

  \code{phases} Named list. The default is created using the helper function
  \code{\link{makePhase}}. Each item in the list replicates the phase name
  as many times as there are time points in that phase. Actual time points
  are derived during initialization and stored in the field \code{designMat}.

  \code{propErrVar} Named numeric vector of length 3. The default is
  \code{c(randFx=.5, res=.25, mserr=.25)}. The names must be
  \code{randFx}, the proportion of the total variance due to random effects;
  \code{res}, the proportion of the total variance due to residual
  autocorrelation; and \code{mserr}, the proportion of total variance due to
  measurement error. The three values must be proportions and must sum to 1.

  \code{randFxOrder} Numeric vector. The default is \code{1}. This is used
  to specify the order of the polynomial growth model as follows:
  \code{randFxOrder=0} is an intercept only model, \code{randFxOrder=1} adds
  random slopes, \code{randFxOrder=2} is a quadratic growth model,
  \code{randFxOrder=3} is a cubic growth model, etc.

  \code{randFxCor} Numeric. The correlation(s) between all of the random
  effects. This can be edited later and made group and/or phase specific. See
  the \strong{Examples}.

  \code{randFxVar} Numeric vector. The default is \code{c(1, 1)}. This
  parameter is used to specify the variances of the random effects. The
  number of variances should equal \code{randFxOrder + 1}. The random effects
  variances are created as
  \code{Var[o] = propErrVar$randFx * (randFxVar[o]/sum(randFxVar))} where
  \code{o=0:randFxOredr}. Hence \code{randFxVar} specifies the ratios of
  the variance that is partitioned among the random effects and rescaled by
  \code{propErrVar$randFx}. See \code{makeData} in the \strong{Methods}
  section for more details.

  \code{error} An error object for the residual autocorrelation. The default
  is \code{armaErr$new(list(ar=c(.5), ma=c(0)))}, a first order AR process
  with \eqn{phi_1=.5}. See \code{\link{armaErr}}. See \code{makeData} in the
  \strong{Methods} section for more details.

  \code{merror} An error object for the measurement error. The default
  is \code{armaErr$new(list()}, a white noise process. See
  \code{\link{armaErr}}. Also see \code{makeData} in the \strong{Methods}
  section for more details.

  \code{ymean} Numeric. The default is \code{100}. The mean of the
  final data. If either \code{yMin} or \code{yMax} are not \code{NULL},
  \code{ymean} is ignored.

  \code{ySD} Numeric. The default is \code{15}. The standard deviation of the
  final data. If both \code{yMin} and \code{yMax} are not \code{NULL},
  \code{ySD} is ignored.

  \code{yMin} Numeric. The default is \code{NULL} in which case \code{yMin} is
  ignored. The minimum value for the final data.

  \code{yMax} Numeric. The default is \code{NULL} in which case \code{yMax} is
  ignored. The maximum value for the final data.

  }

  \item{\code{print}}{See \code{\link{designICT}}.}

  \item{\code{designCheck}}{See \code{\link{designICT}}.}

  \item{\code{update}}{A method to update editable field in a \code{polyICT}
  object. Fields that can be updated are those listed in \code{new}. New
  values are passed by name using, for example,
  \code{$update(groups=c(group1=25, group2=25), randFxOrder=2)}. The are no
  defaults and any number of fields can be updated at once.
  }

  \item{\code{makeData}}{A method to simulate one data set from the settings
  in a given \code{polyICT} object. This method is not intended to be used
  directly by the user, who should instead use \code{\link{ICTpower}} to
  automate a power analysis for one ICT design, or \code{\link{ICTpowerSim}} for
  conducting a full power analysis simulation study. The parameters are

    \code{seed} Numeric. The default is \code{123}. A random seed for
    reproducibility. If multiple calls are made to \code{makeData}, the seed
    should change for each call as is done automatically by
    \code{\link{ICTpower}}.
  }
}
}

\examples{
# Set up a new polyICT object using the default parameter settings

myPolyICT <- polyICT$new(
  groups            = c(group1=10, group2=10)          ,
  phases            = makePhase()                      ,
  propErrVar        = c(randFx=.5, res=.25, mserr=.25) ,
  randFxOrder       = 1                                ,
  randFxCor         = 0.2                              ,
  randFxVar         = c(1, 1)                          ,
  error             = armaErr$new()                    ,
  merror            = armaErr$new(list())              ,
  ySD               = 15                               ,
  yMean             = 100                              ,
  )

# print the object

myPolyICT
# equivalent to:
#print(myPolyICT)
#myPolyICT$print()

# fields can be accessed directly using $
myPolyICT$inputMat
myPolyICT$designMat

# edit the means in inputMat so that
#
# 1. group1 is left with no change in all three phases
# 2. group2 has no change at phase1 (i.e., baseline), phase2 has a phase
#    jump to d=.3 with no within phase change, and phase3 starts where it
#    left off at d=.3 and decreases by d=-.6 through the remained of the
#    phase.
#
# Note that editing inputMat may be easier using
#edit(myPolyICT)
# but this is more diffucult to replicate.
myPolyICT$inputMat[myPolyICT$inputMat$Phase=='phase2' &
  myPolyICT$inputMat$Group=='group2', 'Mean0'] <- .3
myPolyICT$inputMat[myPolyICT$inputMat$Phase=='phase3' &
  myPolyICT$inputMat$Group=='group2', 'Mean0'] <- .3
myPolyICT$inputMat[myPolyICT$inputMat$Phase=='phase3' &
  myPolyICT$inputMat$Group=='group2', 'Mean1'] <- -.6
myPolyICT$inputMat

# now do a large sample (n=5,000/group) check of the design using $designCheck.
# Notice that in group 2, there is a jump of about .3*15=4.5 between phases
# one and two, and that within phase 3 there is -.6*15=-9 point reduction. This
# is not run when calling example(polyICT) due to it taking several seconds to
# simulate the large sample data.


\dontrun{

myPolyICT$designCheck(ylim=c(75,125))

# for comparison, see what can happen under finite samples (n=10/group).
# Notice that there are substantial changes in group1 even though none are
# specified, and that the changes in group2 can be different from what was
# specified. This illustrates possible. finite sample behaviors.

myPolyICT$designCheck(seed=1, npg=10, ylim=c(75,125))
myPolyICT$designCheck(seed=2, npg=10, ylim=c(75,125))
myPolyICT$designCheck(seed=3, npg=10, ylim=c(75,125))

}
}
\author{
Stephen Tueller \email{stueller@rti.org}
}
\keyword{data}
\section{Super class}{
\code{\link[PersonAlyticsPower:designICT]{PersonAlyticsPower::designICT}} -> \code{polyICT}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{inputMat}}{A \code{\link{data.frame}} containing the inputs needed for
data simulation by phase and by group. Columns include \code{Phase},
\code{Group}, \code{nObs} (the number of observations in a given phase),
\code{n} (the number of participants in a given group), the means and
variances for each random effect (see \code{randFxOrder} under \code{new} in
the Methods section), and the variance partioning (see
\code{propErrVar} under \code{new} in the Methods section). Instructions
for editing this field are given in the Examples.

The \code{Mean} columns are standardized effect sizes on the scale of Cohen's
\emph{d}. For more detailed information and illustrations, see the Example
section.}

\item{\code{randFxVar}}{See \code{randFxVar} in the \code{new} method. Phase and/or
group specific variances can be specified by editing \code{inputMat} after
initializing a \code{polyICT} object.}

\item{\code{randFxCor}}{A default correlation between the random effects. This can be
edited later as shown in the examples.}

\item{\code{propErrVar}}{See \code{propErrVar} in the \code{new} Method. See also
\code{inputMat} and the Examples for making these inputs phase and/or group
specific.}

\item{\code{error}}{See \code{error} in the \code{new} Method. See also
\code{\link{armaErr}}.}

\item{\code{merror}}{See \code{merror} in the \code{new} Method.}

\item{\code{yMean}}{See \code{yMean} in the \code{new} Method.}

\item{\code{ySD}}{See \code{ySD} in the \code{new} Method.}

\item{\code{yMin}}{See \code{yMin} in the \code{new} Method.}

\item{\code{yMax}}{See \code{yMax} in the \code{new} Method.}

\item{\code{n}}{The total sample size.}

\item{\code{nObs}}{The total number of observations (i.e., time points).}

\item{\code{groups}}{See \code{groups} in the \code{new} Method.}

\item{\code{phases}}{See \code{phases} in the \code{new} Method.}

\item{\code{designMat}}{The design matrix with phases and timepoints.}

\item{\code{meanNames}}{The columns of \code{InputMat}
corresponding to the effect sizes/random effect means.}

\item{\code{varNames}}{The columns of \code{InputMat}
corresponding to the random effect variances.}

\item{\code{phaseNames}}{The names of the phases, taken from \code{phases}.}

\item{\code{groupNames}}{The names of the groups, taken from \code{groups}.}

\item{\code{randFxFam}}{A \code{\link{gamlss.family}} distribution for non-normal
random effects. Not implemented.}

\item{\code{randFxFamParms}}{The parameters for the \code{\link{gamlss.family}}
distribution specified in \code{randFxFam}. Not implemented.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{inputMat}}{A \code{\link{data.frame}} containing the inputs needed for
data simulation by phase and by group. Columns include \code{Phase},
\code{Group}, \code{nObs} (the number of observations in a given phase),
\code{n} (the number of participants in a given group), the means and
variances for each random effect (see \code{randFxOrder} under \code{new} in
the Methods section), and the variance partioning (see
\code{propErrVar} under \code{new} in the Methods section). Instructions
for editing this field are given in the Examples.

The \code{Mean} columns are standardized effect sizes on the scale of Cohen's
\emph{d}. For more detailed information and illustrations, see the Example
section.}

\item{\code{randFxVar}}{See \code{randFxVar} in the \code{new} method. Phase and/or
group specific variances can be specified by editing \code{inputMat} after
initializing a \code{polyICT} object.}

\item{\code{randFxCor}}{A default correlation between the random effects. This can be
edited later as shown in the examples.}

\item{\code{propErrVar}}{See \code{propErrVar} in the \code{new} Method. See also
\code{inputMat} and the Examples for making these inputs phase and/or group
specific.}

\item{\code{error}}{See \code{error} in the \code{new} Method. See also
\code{\link{armaErr}}.}

\item{\code{merror}}{See \code{merror} in the \code{new} Method.}

\item{\code{yMean}}{See \code{yMean} in the \code{new} Method.}

\item{\code{ySD}}{See \code{ySD} in the \code{new} Method.}

\item{\code{yMin}}{See \code{yMin} in the \code{new} Method.}

\item{\code{yMax}}{See \code{yMax} in the \code{new} Method.}

\item{\code{n}}{The total sample size.}

\item{\code{nObs}}{The total number of observations (i.e., time points).}

\item{\code{groups}}{See \code{groups} in the \code{new} Method.}

\item{\code{phases}}{See \code{phases} in the \code{new} Method.}

\item{\code{designMat}}{The design matrix with phases and timepoints.}

\item{\code{meanNames}}{The columns of \code{InputMat}
corresponding to the effect sizes/random effect means.}

\item{\code{varNames}}{The columns of \code{InputMat}
corresponding to the random effect variances.}

\item{\code{phaseNames}}{The names of the phases, taken from \code{phases}.}

\item{\code{groupNames}}{The names of the groups, taken from \code{groups}.}

\item{\code{randFxFam}}{A \code{\link{gamlss.family}} distribution for non-normal
random effects. Not implemented.}

\item{\code{randFxFamParms}}{The parameters for the \code{\link{gamlss.family}}
distribution specified in \code{randFxFam}. Not implemented.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{polyICT$new()}}
\item \href{#method-print}{\code{polyICT$print()}}
\item \href{#method-update}{\code{polyICT$update()}}
\item \href{#method-makeData}{\code{polyICT$makeData()}}
\item \href{#method-clone}{\code{polyICT$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="PersonAlyticsPower" data-topic="designICT" data-id="designCheck">}\href{../../PersonAlyticsPower/html/designICT.html#method-designCheck}{\code{PersonAlyticsPower::designICT$designCheck()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{polyICT$new(
  groups = c(group1 = 10, group2 = 10),
  phases = makePhase(),
  propErrVar = c(randFx = 0.5, res = 0.25, mserr = 0.25),
  randFxOrder = 1,
  randFxCor = 0.2,
  randFxVar = c(1, 1),
  error = armaErr$new(),
  merror = armaErr$new(list()),
  ySD = 15,
  yMean = 100,
  yMin = NULL,
  yMax = NULL,
  yCut = NULL,
  randFxFam = qNO,
  randFxFamParms = list(mu = 0.5, sigma = 1)
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{polyICT$print(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\subsection{Method \code{update()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{polyICT$update(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-makeData"></a>}}
\subsection{Method \code{makeData()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{polyICT$makeData(seed = 123)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{polyICT$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
